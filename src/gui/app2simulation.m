%  Copyright (c) 2017, Amos Egel (KIT), Lorenzo Pattelli (LENS)
%                      Giacomo Mazzamuto (LENS)
%  All rights reserved.
%
%  Redistribution and use in source and binary forms, with or without
%  modification, are permitted provided that the following conditions are met:
%
%  * Redistributions of source code must retain the above copyright notice, this
%    list of conditions and the following disclaimer.
%
%  * Redistributions in binary form must reproduce the above copyright notice,
%    this list of conditions and the following disclaimer in the documentation
%    and/or other materials provided with the distribution.
%
%  * Neither the name of the copyright holder nor the names of its
%    contributors may be used to endorse or promote products derived from
%    this software without specific prior written permission.
%
%  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%  POSSIBILITY OF SUCH DAMAGE.

%===============================================================================
%> @brief Generate a celes_simulation object from a model wizard app object
%>
%> @param       app (model_wizard application object)
%===============================================================================
function simulation = app2simulation(app)

% initialize fields of simulation.input.particles object
particles = celes_particles('positionArray',        single(app.particlePositions), ...
                            'refractiveIndexArray', app.particleRefractiveIndices, ...
                            'radiusArray',          app.particleRadii ...
                            );

% initialize fields of simulation.input.initialField object
initialField = celes_initialField('polarAngle',     0, ...
                                  'azimuthalAngle', 0, ...
                                  'amplitude',      single(app.AmplitudeEditField.Value), ...
                                  'polarization',   app.PolarizationDropDown.Value, ...
                                  'beamWidth',      single(app.InitialBeamWaistEditField.Value), ...
                                  'focalPoint',     single([app.InitialFocusXEditField.Value,app.InitialFocusYEditField.Value,app.InitialFocusZEditField.Value]) ...
                                  );

% initialize fields of simulation.input object
input = celes_input('wavelength',                   single(app.WavelengthEditField.Value), ...
                    'mediumRefractiveIndex',        single(app.BackgroundRefractiveIndexEditField.Value), ...
                    'particles',                    particles, ...
                    'initialField',                 initialField ...
                    );

% initialize fields of simulation.numerics.preconditioner object
preconditioner = celes_preconditioner('type',               app.PreconditionerDropDown.Value, ...
                                      'partitionEdgeSizes', [app.PreconditionerPartitionXEditField.Value,app.PreconditionerPartitionYEditField.Value,app.PreconditionerPartitionZEditField.Value] ...
                                      );

% initialize fields of simulation.numerics.solver object
solver = celes_solver('type',                       app.SolverTypeDropDown.Value, ...
                      'tolerance',                  app.SolverToleranceEditField.Value, ...
                      'maxIter',                    app.SolverMaxiterEditField.Value, ...
                      'restart',                    200, ...
                      'preconditioner',             preconditioner);

% initialize fields of simulation.numerics object
if app.CustomPolarGridCheckBox.Value && app.CustomAzimuthalGridCheckBox.Value
    numerics = celes_numerics('lmax',                   app.lmaxEditField.Value, ...
                              'polarAnglesArray',       single(app.polarGrid), ...
                              'azimuthalAnglesArray',   single(app.azimuthalGrid), ...
                              'gpuFlag',                app.ComputeOnGPUCheckBox.Value, ...
                              'particleDistanceResolution', single(app.LookupTableResolutionEditField.Value), ...
                              'solver',                 solver);
elseif app.CustomPolarGridCheckBox.Value && ~app.CustomAzimuthalGridCheckBox.Value
    numerics = celes_numerics('lmax',                   app.lmaxEditField.Value, ...
                              'polarAnglesArray',       single(app.polarGrid), ...
                              'azimuthalAnglesArray',   single(0:app.AzimuthalResolutionEditField.Value:360)*pi/180, ...
                              'gpuFlag',                app.ComputeOnGPUCheckBox.Value, ...
                              'particleDistanceResolution', single(app.LookupTableResolutionEditField.Value), ...
                              'solver',                 solver);
elseif ~app.CustomPolarGridCheckBox.Value && app.CustomAzimuthalGridCheckBox.Value
    numerics = celes_numerics('lmax',                   app.lmaxEditField.Value, ...
                              'polarAnglesArray',       single(0:app.PolarResolutionEditField.Value:180)*pi/180, ...
                              'azimuthalAnglesArray',   single(app.azimuthalGrid), ...
                              'gpuFlag',                app.ComputeOnGPUCheckBox.Value, ...
                              'particleDistanceResolution', single(app.LookupTableResolutionEditField.Value), ...
                              'solver',                 solver);
else
    numerics = celes_numerics('lmax',                   app.lmaxEditField.Value, ...
                              'polarAnglesArray',       single(0:app.PolarResolutionEditField.Value:180)*pi/180, ...
                              'azimuthalAnglesArray',   single(0:app.AzimuthalResolutionEditField.Value:360)*pi/180, ...
                              'gpuFlag',                app.ComputeOnGPUCheckBox.Value, ...
                              'particleDistanceResolution', single(app.LookupTableResolutionEditField.Value), ...
                              'solver',                 solver);
end

% initialize fields of simulation.output object
if app.FieldEvaluationCheckBox.Value
    dim1arr = app.FieldDim1MinEditField.Value:app.FieldDim1StepEditField.Value:app.FieldDim1MaxEditField.Value;
    dim2arr = app.FieldDim2MinEditField.Value:app.FieldDim2StepEditField.Value:app.FieldDim2MaxEditField.Value;
    [dim1,dim2]=meshgrid(dim1arr,dim2arr);
    dim3=dim1-dim1+app.FieldPlanePosEditField.Value;
    sz=size(dim1);
    switch app.FieldPlaneDropDown.Value
        case 'xz-Plane'
            output = celes_output('fieldPoints',            [dim1(:),dim3(:),dim2(:)], ...
                                  'fieldPointsArrayDims',   sz);
        case 'yz-Plane'
            output = celes_output('fieldPoints',            [dim3(:),dim1(:),dim2(:)], ...
                                  'fieldPointsArrayDims',   sz);
            output.fieldPoints=[dim3(:),dim1(:),dim2(:)];
        case 'xy-Plane'
            output = celes_output('fieldPoints',            [dim1(:),dim2(:),dim3(:)], ...
                                  'fieldPointsArrayDims',   sz);
    end
end

simulation = celes_simulation('input',      input, ...
                              'numerics',   numerics, ...
                              'output',     output);

end
